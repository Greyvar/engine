// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server_to_client_messages.proto

#ifndef PROTOBUF_INCLUDED_server_5fto_5fclient_5fmessages_2eproto
#define PROTOBUF_INCLUDED_server_5fto_5fclient_5fmessages_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_server_5fto_5fclient_5fmessages_2eproto 

namespace protobuf_server_5fto_5fclient_5fmessages_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[13];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_server_5fto_5fclient_5fmessages_2eproto
namespace greyvarproto {
class ConnectionResponse;
class ConnectionResponseDefaultTypeInternal;
extern ConnectionResponseDefaultTypeInternal _ConnectionResponse_default_instance_;
class EntityMoved;
class EntityMovedDefaultTypeInternal;
extern EntityMovedDefaultTypeInternal _EntityMoved_default_instance_;
class EntitySpawn;
class EntitySpawnDefaultTypeInternal;
extern EntitySpawnDefaultTypeInternal _EntitySpawn_default_instance_;
class Grid;
class GridDefaultTypeInternal;
extern GridDefaultTypeInternal _Grid_default_instance_;
class MoveResponse;
class MoveResponseDefaultTypeInternal;
extern MoveResponseDefaultTypeInternal _MoveResponse_default_instance_;
class NoResponse;
class NoResponseDefaultTypeInternal;
extern NoResponseDefaultTypeInternal _NoResponse_default_instance_;
class PlayerAlreadyHere;
class PlayerAlreadyHereDefaultTypeInternal;
extern PlayerAlreadyHereDefaultTypeInternal _PlayerAlreadyHere_default_instance_;
class PlayerFrame;
class PlayerFrameDefaultTypeInternal;
extern PlayerFrameDefaultTypeInternal _PlayerFrame_default_instance_;
class PlayerJoined;
class PlayerJoinedDefaultTypeInternal;
extern PlayerJoinedDefaultTypeInternal _PlayerJoined_default_instance_;
class PlayerQuit;
class PlayerQuitDefaultTypeInternal;
extern PlayerQuitDefaultTypeInternal _PlayerQuit_default_instance_;
class PlayerYou;
class PlayerYouDefaultTypeInternal;
extern PlayerYouDefaultTypeInternal _PlayerYou_default_instance_;
class ServerFrameResponse;
class ServerFrameResponseDefaultTypeInternal;
extern ServerFrameResponseDefaultTypeInternal _ServerFrameResponse_default_instance_;
class Tile;
class TileDefaultTypeInternal;
extern TileDefaultTypeInternal _Tile_default_instance_;
}  // namespace greyvarproto
namespace google {
namespace protobuf {
template<> ::greyvarproto::ConnectionResponse* Arena::CreateMaybeMessage<::greyvarproto::ConnectionResponse>(Arena*);
template<> ::greyvarproto::EntityMoved* Arena::CreateMaybeMessage<::greyvarproto::EntityMoved>(Arena*);
template<> ::greyvarproto::EntitySpawn* Arena::CreateMaybeMessage<::greyvarproto::EntitySpawn>(Arena*);
template<> ::greyvarproto::Grid* Arena::CreateMaybeMessage<::greyvarproto::Grid>(Arena*);
template<> ::greyvarproto::MoveResponse* Arena::CreateMaybeMessage<::greyvarproto::MoveResponse>(Arena*);
template<> ::greyvarproto::NoResponse* Arena::CreateMaybeMessage<::greyvarproto::NoResponse>(Arena*);
template<> ::greyvarproto::PlayerAlreadyHere* Arena::CreateMaybeMessage<::greyvarproto::PlayerAlreadyHere>(Arena*);
template<> ::greyvarproto::PlayerFrame* Arena::CreateMaybeMessage<::greyvarproto::PlayerFrame>(Arena*);
template<> ::greyvarproto::PlayerJoined* Arena::CreateMaybeMessage<::greyvarproto::PlayerJoined>(Arena*);
template<> ::greyvarproto::PlayerQuit* Arena::CreateMaybeMessage<::greyvarproto::PlayerQuit>(Arena*);
template<> ::greyvarproto::PlayerYou* Arena::CreateMaybeMessage<::greyvarproto::PlayerYou>(Arena*);
template<> ::greyvarproto::ServerFrameResponse* Arena::CreateMaybeMessage<::greyvarproto::ServerFrameResponse>(Arena*);
template<> ::greyvarproto::Tile* Arena::CreateMaybeMessage<::greyvarproto::Tile>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace greyvarproto {

// ===================================================================

class ServerFrameResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:greyvarproto.ServerFrameResponse) */ {
 public:
  ServerFrameResponse();
  virtual ~ServerFrameResponse();

  ServerFrameResponse(const ServerFrameResponse& from);

  inline ServerFrameResponse& operator=(const ServerFrameResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerFrameResponse(ServerFrameResponse&& from) noexcept
    : ServerFrameResponse() {
    *this = ::std::move(from);
  }

  inline ServerFrameResponse& operator=(ServerFrameResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerFrameResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerFrameResponse* internal_default_instance() {
    return reinterpret_cast<const ServerFrameResponse*>(
               &_ServerFrameResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ServerFrameResponse* other);
  friend void swap(ServerFrameResponse& a, ServerFrameResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerFrameResponse* New() const final {
    return CreateMaybeMessage<ServerFrameResponse>(NULL);
  }

  ServerFrameResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServerFrameResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServerFrameResponse& from);
  void MergeFrom(const ServerFrameResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerFrameResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .greyvarproto.PlayerFrame playerFrames = 1;
  int playerframes_size() const;
  void clear_playerframes();
  static const int kPlayerFramesFieldNumber = 1;
  ::greyvarproto::PlayerFrame* mutable_playerframes(int index);
  ::google::protobuf::RepeatedPtrField< ::greyvarproto::PlayerFrame >*
      mutable_playerframes();
  const ::greyvarproto::PlayerFrame& playerframes(int index) const;
  ::greyvarproto::PlayerFrame* add_playerframes();
  const ::google::protobuf::RepeatedPtrField< ::greyvarproto::PlayerFrame >&
      playerframes() const;

  // .greyvarproto.EntityMoved entityMoved = 2;
  bool has_entitymoved() const;
  void clear_entitymoved();
  static const int kEntityMovedFieldNumber = 2;
  private:
  const ::greyvarproto::EntityMoved& _internal_entitymoved() const;
  public:
  const ::greyvarproto::EntityMoved& entitymoved() const;
  ::greyvarproto::EntityMoved* release_entitymoved();
  ::greyvarproto::EntityMoved* mutable_entitymoved();
  void set_allocated_entitymoved(::greyvarproto::EntityMoved* entitymoved);

  // .greyvarproto.EntitySpawn entitySpawn = 3;
  bool has_entityspawn() const;
  void clear_entityspawn();
  static const int kEntitySpawnFieldNumber = 3;
  private:
  const ::greyvarproto::EntitySpawn& _internal_entityspawn() const;
  public:
  const ::greyvarproto::EntitySpawn& entityspawn() const;
  ::greyvarproto::EntitySpawn* release_entityspawn();
  ::greyvarproto::EntitySpawn* mutable_entityspawn();
  void set_allocated_entityspawn(::greyvarproto::EntitySpawn* entityspawn);

  // .greyvarproto.PlayerJoined playerJoined = 4;
  bool has_playerjoined() const;
  void clear_playerjoined();
  static const int kPlayerJoinedFieldNumber = 4;
  private:
  const ::greyvarproto::PlayerJoined& _internal_playerjoined() const;
  public:
  const ::greyvarproto::PlayerJoined& playerjoined() const;
  ::greyvarproto::PlayerJoined* release_playerjoined();
  ::greyvarproto::PlayerJoined* mutable_playerjoined();
  void set_allocated_playerjoined(::greyvarproto::PlayerJoined* playerjoined);

  // .greyvarproto.Tile singleTileChange = 5;
  bool has_singletilechange() const;
  void clear_singletilechange();
  static const int kSingleTileChangeFieldNumber = 5;
  private:
  const ::greyvarproto::Tile& _internal_singletilechange() const;
  public:
  const ::greyvarproto::Tile& singletilechange() const;
  ::greyvarproto::Tile* release_singletilechange();
  ::greyvarproto::Tile* mutable_singletilechange();
  void set_allocated_singletilechange(::greyvarproto::Tile* singletilechange);

  // .greyvarproto.Grid grid = 6;
  bool has_grid() const;
  void clear_grid();
  static const int kGridFieldNumber = 6;
  private:
  const ::greyvarproto::Grid& _internal_grid() const;
  public:
  const ::greyvarproto::Grid& grid() const;
  ::greyvarproto::Grid* release_grid();
  ::greyvarproto::Grid* mutable_grid();
  void set_allocated_grid(::greyvarproto::Grid* grid);

  // @@protoc_insertion_point(class_scope:greyvarproto.ServerFrameResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::greyvarproto::PlayerFrame > playerframes_;
  ::greyvarproto::EntityMoved* entitymoved_;
  ::greyvarproto::EntitySpawn* entityspawn_;
  ::greyvarproto::PlayerJoined* playerjoined_;
  ::greyvarproto::Tile* singletilechange_;
  ::greyvarproto::Grid* grid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_server_5fto_5fclient_5fmessages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerFrame : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:greyvarproto.PlayerFrame) */ {
 public:
  PlayerFrame();
  virtual ~PlayerFrame();

  PlayerFrame(const PlayerFrame& from);

  inline PlayerFrame& operator=(const PlayerFrame& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerFrame(PlayerFrame&& from) noexcept
    : PlayerFrame() {
    *this = ::std::move(from);
  }

  inline PlayerFrame& operator=(PlayerFrame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerFrame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerFrame* internal_default_instance() {
    return reinterpret_cast<const PlayerFrame*>(
               &_PlayerFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(PlayerFrame* other);
  friend void swap(PlayerFrame& a, PlayerFrame& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerFrame* New() const final {
    return CreateMaybeMessage<PlayerFrame>(NULL);
  }

  PlayerFrame* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlayerFrame>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlayerFrame& from);
  void MergeFrom(const PlayerFrame& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerFrame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .greyvarproto.MoveResponse moveResponse = 2;
  bool has_moveresponse() const;
  void clear_moveresponse();
  static const int kMoveResponseFieldNumber = 2;
  private:
  const ::greyvarproto::MoveResponse& _internal_moveresponse() const;
  public:
  const ::greyvarproto::MoveResponse& moveresponse() const;
  ::greyvarproto::MoveResponse* release_moveresponse();
  ::greyvarproto::MoveResponse* mutable_moveresponse();
  void set_allocated_moveresponse(::greyvarproto::MoveResponse* moveresponse);

  // .greyvarproto.PlayerQuit playerQuit = 3;
  bool has_playerquit() const;
  void clear_playerquit();
  static const int kPlayerQuitFieldNumber = 3;
  private:
  const ::greyvarproto::PlayerQuit& _internal_playerquit() const;
  public:
  const ::greyvarproto::PlayerQuit& playerquit() const;
  ::greyvarproto::PlayerQuit* release_playerquit();
  ::greyvarproto::PlayerQuit* mutable_playerquit();
  void set_allocated_playerquit(::greyvarproto::PlayerQuit* playerquit);

  // .greyvarproto.PlayerYou playerYou = 4;
  bool has_playeryou() const;
  void clear_playeryou();
  static const int kPlayerYouFieldNumber = 4;
  private:
  const ::greyvarproto::PlayerYou& _internal_playeryou() const;
  public:
  const ::greyvarproto::PlayerYou& playeryou() const;
  ::greyvarproto::PlayerYou* release_playeryou();
  ::greyvarproto::PlayerYou* mutable_playeryou();
  void set_allocated_playeryou(::greyvarproto::PlayerYou* playeryou);

  // int32 playerId = 1;
  void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  ::google::protobuf::int32 playerid() const;
  void set_playerid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:greyvarproto.PlayerFrame)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::greyvarproto::MoveResponse* moveresponse_;
  ::greyvarproto::PlayerQuit* playerquit_;
  ::greyvarproto::PlayerYou* playeryou_;
  ::google::protobuf::int32 playerid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_server_5fto_5fclient_5fmessages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MoveResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:greyvarproto.MoveResponse) */ {
 public:
  MoveResponse();
  virtual ~MoveResponse();

  MoveResponse(const MoveResponse& from);

  inline MoveResponse& operator=(const MoveResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MoveResponse(MoveResponse&& from) noexcept
    : MoveResponse() {
    *this = ::std::move(from);
  }

  inline MoveResponse& operator=(MoveResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MoveResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MoveResponse* internal_default_instance() {
    return reinterpret_cast<const MoveResponse*>(
               &_MoveResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(MoveResponse* other);
  friend void swap(MoveResponse& a, MoveResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MoveResponse* New() const final {
    return CreateMaybeMessage<MoveResponse>(NULL);
  }

  MoveResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MoveResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MoveResponse& from);
  void MergeFrom(const MoveResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:greyvarproto.MoveResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_server_5fto_5fclient_5fmessages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EntityMoved : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:greyvarproto.EntityMoved) */ {
 public:
  EntityMoved();
  virtual ~EntityMoved();

  EntityMoved(const EntityMoved& from);

  inline EntityMoved& operator=(const EntityMoved& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EntityMoved(EntityMoved&& from) noexcept
    : EntityMoved() {
    *this = ::std::move(from);
  }

  inline EntityMoved& operator=(EntityMoved&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EntityMoved& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EntityMoved* internal_default_instance() {
    return reinterpret_cast<const EntityMoved*>(
               &_EntityMoved_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(EntityMoved* other);
  friend void swap(EntityMoved& a, EntityMoved& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EntityMoved* New() const final {
    return CreateMaybeMessage<EntityMoved>(NULL);
  }

  EntityMoved* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EntityMoved>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EntityMoved& from);
  void MergeFrom(const EntityMoved& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EntityMoved* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 entityId = 1;
  void clear_entityid();
  static const int kEntityIdFieldNumber = 1;
  ::google::protobuf::int32 entityid() const;
  void set_entityid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:greyvarproto.EntityMoved)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 entityid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_server_5fto_5fclient_5fmessages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EntitySpawn : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:greyvarproto.EntitySpawn) */ {
 public:
  EntitySpawn();
  virtual ~EntitySpawn();

  EntitySpawn(const EntitySpawn& from);

  inline EntitySpawn& operator=(const EntitySpawn& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EntitySpawn(EntitySpawn&& from) noexcept
    : EntitySpawn() {
    *this = ::std::move(from);
  }

  inline EntitySpawn& operator=(EntitySpawn&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EntitySpawn& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EntitySpawn* internal_default_instance() {
    return reinterpret_cast<const EntitySpawn*>(
               &_EntitySpawn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(EntitySpawn* other);
  friend void swap(EntitySpawn& a, EntitySpawn& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EntitySpawn* New() const final {
    return CreateMaybeMessage<EntitySpawn>(NULL);
  }

  EntitySpawn* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EntitySpawn>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EntitySpawn& from);
  void MergeFrom(const EntitySpawn& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EntitySpawn* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string texture = 6;
  void clear_texture();
  static const int kTextureFieldNumber = 6;
  const ::std::string& texture() const;
  void set_texture(const ::std::string& value);
  #if LANG_CXX11
  void set_texture(::std::string&& value);
  #endif
  void set_texture(const char* value);
  void set_texture(const char* value, size_t size);
  ::std::string* mutable_texture();
  ::std::string* release_texture();
  void set_allocated_texture(::std::string* texture);

  // int32 entityId = 1;
  void clear_entityid();
  static const int kEntityIdFieldNumber = 1;
  ::google::protobuf::int32 entityid() const;
  void set_entityid(::google::protobuf::int32 value);

  // int32 x = 2;
  void clear_x();
  static const int kXFieldNumber = 2;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // int32 y = 3;
  void clear_y();
  static const int kYFieldNumber = 3;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // int32 w = 4;
  void clear_w();
  static const int kWFieldNumber = 4;
  ::google::protobuf::int32 w() const;
  void set_w(::google::protobuf::int32 value);

  // int32 h = 5;
  void clear_h();
  static const int kHFieldNumber = 5;
  ::google::protobuf::int32 h() const;
  void set_h(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:greyvarproto.EntitySpawn)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr texture_;
  ::google::protobuf::int32 entityid_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 w_;
  ::google::protobuf::int32 h_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_server_5fto_5fclient_5fmessages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerQuit : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:greyvarproto.PlayerQuit) */ {
 public:
  PlayerQuit();
  virtual ~PlayerQuit();

  PlayerQuit(const PlayerQuit& from);

  inline PlayerQuit& operator=(const PlayerQuit& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerQuit(PlayerQuit&& from) noexcept
    : PlayerQuit() {
    *this = ::std::move(from);
  }

  inline PlayerQuit& operator=(PlayerQuit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerQuit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerQuit* internal_default_instance() {
    return reinterpret_cast<const PlayerQuit*>(
               &_PlayerQuit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(PlayerQuit* other);
  friend void swap(PlayerQuit& a, PlayerQuit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerQuit* New() const final {
    return CreateMaybeMessage<PlayerQuit>(NULL);
  }

  PlayerQuit* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlayerQuit>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlayerQuit& from);
  void MergeFrom(const PlayerQuit& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerQuit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 playerId = 1;
  void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  ::google::protobuf::int32 playerid() const;
  void set_playerid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:greyvarproto.PlayerQuit)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 playerid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_server_5fto_5fclient_5fmessages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerAlreadyHere : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:greyvarproto.PlayerAlreadyHere) */ {
 public:
  PlayerAlreadyHere();
  virtual ~PlayerAlreadyHere();

  PlayerAlreadyHere(const PlayerAlreadyHere& from);

  inline PlayerAlreadyHere& operator=(const PlayerAlreadyHere& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerAlreadyHere(PlayerAlreadyHere&& from) noexcept
    : PlayerAlreadyHere() {
    *this = ::std::move(from);
  }

  inline PlayerAlreadyHere& operator=(PlayerAlreadyHere&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerAlreadyHere& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerAlreadyHere* internal_default_instance() {
    return reinterpret_cast<const PlayerAlreadyHere*>(
               &_PlayerAlreadyHere_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(PlayerAlreadyHere* other);
  friend void swap(PlayerAlreadyHere& a, PlayerAlreadyHere& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerAlreadyHere* New() const final {
    return CreateMaybeMessage<PlayerAlreadyHere>(NULL);
  }

  PlayerAlreadyHere* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlayerAlreadyHere>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlayerAlreadyHere& from);
  void MergeFrom(const PlayerAlreadyHere& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerAlreadyHere* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 playerId = 1;
  void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  ::google::protobuf::int32 playerid() const;
  void set_playerid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:greyvarproto.PlayerAlreadyHere)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 playerid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_server_5fto_5fclient_5fmessages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerJoined : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:greyvarproto.PlayerJoined) */ {
 public:
  PlayerJoined();
  virtual ~PlayerJoined();

  PlayerJoined(const PlayerJoined& from);

  inline PlayerJoined& operator=(const PlayerJoined& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerJoined(PlayerJoined&& from) noexcept
    : PlayerJoined() {
    *this = ::std::move(from);
  }

  inline PlayerJoined& operator=(PlayerJoined&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerJoined& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerJoined* internal_default_instance() {
    return reinterpret_cast<const PlayerJoined*>(
               &_PlayerJoined_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(PlayerJoined* other);
  friend void swap(PlayerJoined& a, PlayerJoined& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerJoined* New() const final {
    return CreateMaybeMessage<PlayerJoined>(NULL);
  }

  PlayerJoined* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlayerJoined>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlayerJoined& from);
  void MergeFrom(const PlayerJoined& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerJoined* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string username = 1;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // @@protoc_insertion_point(class_scope:greyvarproto.PlayerJoined)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_server_5fto_5fclient_5fmessages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerYou : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:greyvarproto.PlayerYou) */ {
 public:
  PlayerYou();
  virtual ~PlayerYou();

  PlayerYou(const PlayerYou& from);

  inline PlayerYou& operator=(const PlayerYou& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerYou(PlayerYou&& from) noexcept
    : PlayerYou() {
    *this = ::std::move(from);
  }

  inline PlayerYou& operator=(PlayerYou&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerYou& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerYou* internal_default_instance() {
    return reinterpret_cast<const PlayerYou*>(
               &_PlayerYou_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(PlayerYou* other);
  friend void swap(PlayerYou& a, PlayerYou& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerYou* New() const final {
    return CreateMaybeMessage<PlayerYou>(NULL);
  }

  PlayerYou* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlayerYou>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlayerYou& from);
  void MergeFrom(const PlayerYou& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerYou* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 playerId = 1;
  void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  ::google::protobuf::int32 playerid() const;
  void set_playerid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:greyvarproto.PlayerYou)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 playerid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_server_5fto_5fclient_5fmessages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Tile : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:greyvarproto.Tile) */ {
 public:
  Tile();
  virtual ~Tile();

  Tile(const Tile& from);

  inline Tile& operator=(const Tile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Tile(Tile&& from) noexcept
    : Tile() {
    *this = ::std::move(from);
  }

  inline Tile& operator=(Tile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Tile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Tile* internal_default_instance() {
    return reinterpret_cast<const Tile*>(
               &_Tile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(Tile* other);
  friend void swap(Tile& a, Tile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Tile* New() const final {
    return CreateMaybeMessage<Tile>(NULL);
  }

  Tile* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Tile>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Tile& from);
  void MergeFrom(const Tile& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string tex = 3;
  void clear_tex();
  static const int kTexFieldNumber = 3;
  const ::std::string& tex() const;
  void set_tex(const ::std::string& value);
  #if LANG_CXX11
  void set_tex(::std::string&& value);
  #endif
  void set_tex(const char* value);
  void set_tex(const char* value, size_t size);
  ::std::string* mutable_tex();
  ::std::string* release_tex();
  void set_allocated_tex(::std::string* tex);

  // uint32 col = 1;
  void clear_col();
  static const int kColFieldNumber = 1;
  ::google::protobuf::uint32 col() const;
  void set_col(::google::protobuf::uint32 value);

  // uint32 row = 2;
  void clear_row();
  static const int kRowFieldNumber = 2;
  ::google::protobuf::uint32 row() const;
  void set_row(::google::protobuf::uint32 value);

  // bool flipH = 4;
  void clear_fliph();
  static const int kFlipHFieldNumber = 4;
  bool fliph() const;
  void set_fliph(bool value);

  // bool flipV = 5;
  void clear_flipv();
  static const int kFlipVFieldNumber = 5;
  bool flipv() const;
  void set_flipv(bool value);

  // int32 rot = 6;
  void clear_rot();
  static const int kRotFieldNumber = 6;
  ::google::protobuf::int32 rot() const;
  void set_rot(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:greyvarproto.Tile)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr tex_;
  ::google::protobuf::uint32 col_;
  ::google::protobuf::uint32 row_;
  bool fliph_;
  bool flipv_;
  ::google::protobuf::int32 rot_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_server_5fto_5fclient_5fmessages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Grid : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:greyvarproto.Grid) */ {
 public:
  Grid();
  virtual ~Grid();

  Grid(const Grid& from);

  inline Grid& operator=(const Grid& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Grid(Grid&& from) noexcept
    : Grid() {
    *this = ::std::move(from);
  }

  inline Grid& operator=(Grid&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Grid& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Grid* internal_default_instance() {
    return reinterpret_cast<const Grid*>(
               &_Grid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(Grid* other);
  friend void swap(Grid& a, Grid& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Grid* New() const final {
    return CreateMaybeMessage<Grid>(NULL);
  }

  Grid* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Grid>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Grid& from);
  void MergeFrom(const Grid& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Grid* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .greyvarproto.Tile tiles = 2;
  int tiles_size() const;
  void clear_tiles();
  static const int kTilesFieldNumber = 2;
  ::greyvarproto::Tile* mutable_tiles(int index);
  ::google::protobuf::RepeatedPtrField< ::greyvarproto::Tile >*
      mutable_tiles();
  const ::greyvarproto::Tile& tiles(int index) const;
  ::greyvarproto::Tile* add_tiles();
  const ::google::protobuf::RepeatedPtrField< ::greyvarproto::Tile >&
      tiles() const;

  // string title = 1;
  void clear_title();
  static const int kTitleFieldNumber = 1;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // @@protoc_insertion_point(class_scope:greyvarproto.Grid)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::greyvarproto::Tile > tiles_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_server_5fto_5fclient_5fmessages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConnectionResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:greyvarproto.ConnectionResponse) */ {
 public:
  ConnectionResponse();
  virtual ~ConnectionResponse();

  ConnectionResponse(const ConnectionResponse& from);

  inline ConnectionResponse& operator=(const ConnectionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConnectionResponse(ConnectionResponse&& from) noexcept
    : ConnectionResponse() {
    *this = ::std::move(from);
  }

  inline ConnectionResponse& operator=(ConnectionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConnectionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnectionResponse* internal_default_instance() {
    return reinterpret_cast<const ConnectionResponse*>(
               &_ConnectionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(ConnectionResponse* other);
  friend void swap(ConnectionResponse& a, ConnectionResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConnectionResponse* New() const final {
    return CreateMaybeMessage<ConnectionResponse>(NULL);
  }

  ConnectionResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConnectionResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConnectionResponse& from);
  void MergeFrom(const ConnectionResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectionResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .greyvarproto.PlayerAlreadyHere playerAlreadyHere = 5;
  int playeralreadyhere_size() const;
  void clear_playeralreadyhere();
  static const int kPlayerAlreadyHereFieldNumber = 5;
  ::greyvarproto::PlayerAlreadyHere* mutable_playeralreadyhere(int index);
  ::google::protobuf::RepeatedPtrField< ::greyvarproto::PlayerAlreadyHere >*
      mutable_playeralreadyhere();
  const ::greyvarproto::PlayerAlreadyHere& playeralreadyhere(int index) const;
  ::greyvarproto::PlayerAlreadyHere* add_playeralreadyhere();
  const ::google::protobuf::RepeatedPtrField< ::greyvarproto::PlayerAlreadyHere >&
      playeralreadyhere() const;

  // string serverVersion = 1;
  void clear_serverversion();
  static const int kServerVersionFieldNumber = 1;
  const ::std::string& serverversion() const;
  void set_serverversion(const ::std::string& value);
  #if LANG_CXX11
  void set_serverversion(::std::string&& value);
  #endif
  void set_serverversion(const char* value);
  void set_serverversion(const char* value, size_t size);
  ::std::string* mutable_serverversion();
  ::std::string* release_serverversion();
  void set_allocated_serverversion(::std::string* serverversion);

  // @@protoc_insertion_point(class_scope:greyvarproto.ConnectionResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::greyvarproto::PlayerAlreadyHere > playeralreadyhere_;
  ::google::protobuf::internal::ArenaStringPtr serverversion_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_server_5fto_5fclient_5fmessages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NoResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:greyvarproto.NoResponse) */ {
 public:
  NoResponse();
  virtual ~NoResponse();

  NoResponse(const NoResponse& from);

  inline NoResponse& operator=(const NoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NoResponse(NoResponse&& from) noexcept
    : NoResponse() {
    *this = ::std::move(from);
  }

  inline NoResponse& operator=(NoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NoResponse* internal_default_instance() {
    return reinterpret_cast<const NoResponse*>(
               &_NoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(NoResponse* other);
  friend void swap(NoResponse& a, NoResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NoResponse* New() const final {
    return CreateMaybeMessage<NoResponse>(NULL);
  }

  NoResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NoResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NoResponse& from);
  void MergeFrom(const NoResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:greyvarproto.NoResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_server_5fto_5fclient_5fmessages_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServerFrameResponse

// repeated .greyvarproto.PlayerFrame playerFrames = 1;
inline int ServerFrameResponse::playerframes_size() const {
  return playerframes_.size();
}
inline void ServerFrameResponse::clear_playerframes() {
  playerframes_.Clear();
}
inline ::greyvarproto::PlayerFrame* ServerFrameResponse::mutable_playerframes(int index) {
  // @@protoc_insertion_point(field_mutable:greyvarproto.ServerFrameResponse.playerFrames)
  return playerframes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::greyvarproto::PlayerFrame >*
ServerFrameResponse::mutable_playerframes() {
  // @@protoc_insertion_point(field_mutable_list:greyvarproto.ServerFrameResponse.playerFrames)
  return &playerframes_;
}
inline const ::greyvarproto::PlayerFrame& ServerFrameResponse::playerframes(int index) const {
  // @@protoc_insertion_point(field_get:greyvarproto.ServerFrameResponse.playerFrames)
  return playerframes_.Get(index);
}
inline ::greyvarproto::PlayerFrame* ServerFrameResponse::add_playerframes() {
  // @@protoc_insertion_point(field_add:greyvarproto.ServerFrameResponse.playerFrames)
  return playerframes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::greyvarproto::PlayerFrame >&
ServerFrameResponse::playerframes() const {
  // @@protoc_insertion_point(field_list:greyvarproto.ServerFrameResponse.playerFrames)
  return playerframes_;
}

// .greyvarproto.EntityMoved entityMoved = 2;
inline bool ServerFrameResponse::has_entitymoved() const {
  return this != internal_default_instance() && entitymoved_ != NULL;
}
inline void ServerFrameResponse::clear_entitymoved() {
  if (GetArenaNoVirtual() == NULL && entitymoved_ != NULL) {
    delete entitymoved_;
  }
  entitymoved_ = NULL;
}
inline const ::greyvarproto::EntityMoved& ServerFrameResponse::_internal_entitymoved() const {
  return *entitymoved_;
}
inline const ::greyvarproto::EntityMoved& ServerFrameResponse::entitymoved() const {
  const ::greyvarproto::EntityMoved* p = entitymoved_;
  // @@protoc_insertion_point(field_get:greyvarproto.ServerFrameResponse.entityMoved)
  return p != NULL ? *p : *reinterpret_cast<const ::greyvarproto::EntityMoved*>(
      &::greyvarproto::_EntityMoved_default_instance_);
}
inline ::greyvarproto::EntityMoved* ServerFrameResponse::release_entitymoved() {
  // @@protoc_insertion_point(field_release:greyvarproto.ServerFrameResponse.entityMoved)
  
  ::greyvarproto::EntityMoved* temp = entitymoved_;
  entitymoved_ = NULL;
  return temp;
}
inline ::greyvarproto::EntityMoved* ServerFrameResponse::mutable_entitymoved() {
  
  if (entitymoved_ == NULL) {
    auto* p = CreateMaybeMessage<::greyvarproto::EntityMoved>(GetArenaNoVirtual());
    entitymoved_ = p;
  }
  // @@protoc_insertion_point(field_mutable:greyvarproto.ServerFrameResponse.entityMoved)
  return entitymoved_;
}
inline void ServerFrameResponse::set_allocated_entitymoved(::greyvarproto::EntityMoved* entitymoved) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete entitymoved_;
  }
  if (entitymoved) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      entitymoved = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, entitymoved, submessage_arena);
    }
    
  } else {
    
  }
  entitymoved_ = entitymoved;
  // @@protoc_insertion_point(field_set_allocated:greyvarproto.ServerFrameResponse.entityMoved)
}

// .greyvarproto.EntitySpawn entitySpawn = 3;
inline bool ServerFrameResponse::has_entityspawn() const {
  return this != internal_default_instance() && entityspawn_ != NULL;
}
inline void ServerFrameResponse::clear_entityspawn() {
  if (GetArenaNoVirtual() == NULL && entityspawn_ != NULL) {
    delete entityspawn_;
  }
  entityspawn_ = NULL;
}
inline const ::greyvarproto::EntitySpawn& ServerFrameResponse::_internal_entityspawn() const {
  return *entityspawn_;
}
inline const ::greyvarproto::EntitySpawn& ServerFrameResponse::entityspawn() const {
  const ::greyvarproto::EntitySpawn* p = entityspawn_;
  // @@protoc_insertion_point(field_get:greyvarproto.ServerFrameResponse.entitySpawn)
  return p != NULL ? *p : *reinterpret_cast<const ::greyvarproto::EntitySpawn*>(
      &::greyvarproto::_EntitySpawn_default_instance_);
}
inline ::greyvarproto::EntitySpawn* ServerFrameResponse::release_entityspawn() {
  // @@protoc_insertion_point(field_release:greyvarproto.ServerFrameResponse.entitySpawn)
  
  ::greyvarproto::EntitySpawn* temp = entityspawn_;
  entityspawn_ = NULL;
  return temp;
}
inline ::greyvarproto::EntitySpawn* ServerFrameResponse::mutable_entityspawn() {
  
  if (entityspawn_ == NULL) {
    auto* p = CreateMaybeMessage<::greyvarproto::EntitySpawn>(GetArenaNoVirtual());
    entityspawn_ = p;
  }
  // @@protoc_insertion_point(field_mutable:greyvarproto.ServerFrameResponse.entitySpawn)
  return entityspawn_;
}
inline void ServerFrameResponse::set_allocated_entityspawn(::greyvarproto::EntitySpawn* entityspawn) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete entityspawn_;
  }
  if (entityspawn) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      entityspawn = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, entityspawn, submessage_arena);
    }
    
  } else {
    
  }
  entityspawn_ = entityspawn;
  // @@protoc_insertion_point(field_set_allocated:greyvarproto.ServerFrameResponse.entitySpawn)
}

// .greyvarproto.PlayerJoined playerJoined = 4;
inline bool ServerFrameResponse::has_playerjoined() const {
  return this != internal_default_instance() && playerjoined_ != NULL;
}
inline void ServerFrameResponse::clear_playerjoined() {
  if (GetArenaNoVirtual() == NULL && playerjoined_ != NULL) {
    delete playerjoined_;
  }
  playerjoined_ = NULL;
}
inline const ::greyvarproto::PlayerJoined& ServerFrameResponse::_internal_playerjoined() const {
  return *playerjoined_;
}
inline const ::greyvarproto::PlayerJoined& ServerFrameResponse::playerjoined() const {
  const ::greyvarproto::PlayerJoined* p = playerjoined_;
  // @@protoc_insertion_point(field_get:greyvarproto.ServerFrameResponse.playerJoined)
  return p != NULL ? *p : *reinterpret_cast<const ::greyvarproto::PlayerJoined*>(
      &::greyvarproto::_PlayerJoined_default_instance_);
}
inline ::greyvarproto::PlayerJoined* ServerFrameResponse::release_playerjoined() {
  // @@protoc_insertion_point(field_release:greyvarproto.ServerFrameResponse.playerJoined)
  
  ::greyvarproto::PlayerJoined* temp = playerjoined_;
  playerjoined_ = NULL;
  return temp;
}
inline ::greyvarproto::PlayerJoined* ServerFrameResponse::mutable_playerjoined() {
  
  if (playerjoined_ == NULL) {
    auto* p = CreateMaybeMessage<::greyvarproto::PlayerJoined>(GetArenaNoVirtual());
    playerjoined_ = p;
  }
  // @@protoc_insertion_point(field_mutable:greyvarproto.ServerFrameResponse.playerJoined)
  return playerjoined_;
}
inline void ServerFrameResponse::set_allocated_playerjoined(::greyvarproto::PlayerJoined* playerjoined) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete playerjoined_;
  }
  if (playerjoined) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      playerjoined = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, playerjoined, submessage_arena);
    }
    
  } else {
    
  }
  playerjoined_ = playerjoined;
  // @@protoc_insertion_point(field_set_allocated:greyvarproto.ServerFrameResponse.playerJoined)
}

// .greyvarproto.Tile singleTileChange = 5;
inline bool ServerFrameResponse::has_singletilechange() const {
  return this != internal_default_instance() && singletilechange_ != NULL;
}
inline void ServerFrameResponse::clear_singletilechange() {
  if (GetArenaNoVirtual() == NULL && singletilechange_ != NULL) {
    delete singletilechange_;
  }
  singletilechange_ = NULL;
}
inline const ::greyvarproto::Tile& ServerFrameResponse::_internal_singletilechange() const {
  return *singletilechange_;
}
inline const ::greyvarproto::Tile& ServerFrameResponse::singletilechange() const {
  const ::greyvarproto::Tile* p = singletilechange_;
  // @@protoc_insertion_point(field_get:greyvarproto.ServerFrameResponse.singleTileChange)
  return p != NULL ? *p : *reinterpret_cast<const ::greyvarproto::Tile*>(
      &::greyvarproto::_Tile_default_instance_);
}
inline ::greyvarproto::Tile* ServerFrameResponse::release_singletilechange() {
  // @@protoc_insertion_point(field_release:greyvarproto.ServerFrameResponse.singleTileChange)
  
  ::greyvarproto::Tile* temp = singletilechange_;
  singletilechange_ = NULL;
  return temp;
}
inline ::greyvarproto::Tile* ServerFrameResponse::mutable_singletilechange() {
  
  if (singletilechange_ == NULL) {
    auto* p = CreateMaybeMessage<::greyvarproto::Tile>(GetArenaNoVirtual());
    singletilechange_ = p;
  }
  // @@protoc_insertion_point(field_mutable:greyvarproto.ServerFrameResponse.singleTileChange)
  return singletilechange_;
}
inline void ServerFrameResponse::set_allocated_singletilechange(::greyvarproto::Tile* singletilechange) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete singletilechange_;
  }
  if (singletilechange) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      singletilechange = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, singletilechange, submessage_arena);
    }
    
  } else {
    
  }
  singletilechange_ = singletilechange;
  // @@protoc_insertion_point(field_set_allocated:greyvarproto.ServerFrameResponse.singleTileChange)
}

// .greyvarproto.Grid grid = 6;
inline bool ServerFrameResponse::has_grid() const {
  return this != internal_default_instance() && grid_ != NULL;
}
inline void ServerFrameResponse::clear_grid() {
  if (GetArenaNoVirtual() == NULL && grid_ != NULL) {
    delete grid_;
  }
  grid_ = NULL;
}
inline const ::greyvarproto::Grid& ServerFrameResponse::_internal_grid() const {
  return *grid_;
}
inline const ::greyvarproto::Grid& ServerFrameResponse::grid() const {
  const ::greyvarproto::Grid* p = grid_;
  // @@protoc_insertion_point(field_get:greyvarproto.ServerFrameResponse.grid)
  return p != NULL ? *p : *reinterpret_cast<const ::greyvarproto::Grid*>(
      &::greyvarproto::_Grid_default_instance_);
}
inline ::greyvarproto::Grid* ServerFrameResponse::release_grid() {
  // @@protoc_insertion_point(field_release:greyvarproto.ServerFrameResponse.grid)
  
  ::greyvarproto::Grid* temp = grid_;
  grid_ = NULL;
  return temp;
}
inline ::greyvarproto::Grid* ServerFrameResponse::mutable_grid() {
  
  if (grid_ == NULL) {
    auto* p = CreateMaybeMessage<::greyvarproto::Grid>(GetArenaNoVirtual());
    grid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:greyvarproto.ServerFrameResponse.grid)
  return grid_;
}
inline void ServerFrameResponse::set_allocated_grid(::greyvarproto::Grid* grid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete grid_;
  }
  if (grid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      grid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, grid, submessage_arena);
    }
    
  } else {
    
  }
  grid_ = grid;
  // @@protoc_insertion_point(field_set_allocated:greyvarproto.ServerFrameResponse.grid)
}

// -------------------------------------------------------------------

// PlayerFrame

// int32 playerId = 1;
inline void PlayerFrame::clear_playerid() {
  playerid_ = 0;
}
inline ::google::protobuf::int32 PlayerFrame::playerid() const {
  // @@protoc_insertion_point(field_get:greyvarproto.PlayerFrame.playerId)
  return playerid_;
}
inline void PlayerFrame::set_playerid(::google::protobuf::int32 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:greyvarproto.PlayerFrame.playerId)
}

// .greyvarproto.MoveResponse moveResponse = 2;
inline bool PlayerFrame::has_moveresponse() const {
  return this != internal_default_instance() && moveresponse_ != NULL;
}
inline void PlayerFrame::clear_moveresponse() {
  if (GetArenaNoVirtual() == NULL && moveresponse_ != NULL) {
    delete moveresponse_;
  }
  moveresponse_ = NULL;
}
inline const ::greyvarproto::MoveResponse& PlayerFrame::_internal_moveresponse() const {
  return *moveresponse_;
}
inline const ::greyvarproto::MoveResponse& PlayerFrame::moveresponse() const {
  const ::greyvarproto::MoveResponse* p = moveresponse_;
  // @@protoc_insertion_point(field_get:greyvarproto.PlayerFrame.moveResponse)
  return p != NULL ? *p : *reinterpret_cast<const ::greyvarproto::MoveResponse*>(
      &::greyvarproto::_MoveResponse_default_instance_);
}
inline ::greyvarproto::MoveResponse* PlayerFrame::release_moveresponse() {
  // @@protoc_insertion_point(field_release:greyvarproto.PlayerFrame.moveResponse)
  
  ::greyvarproto::MoveResponse* temp = moveresponse_;
  moveresponse_ = NULL;
  return temp;
}
inline ::greyvarproto::MoveResponse* PlayerFrame::mutable_moveresponse() {
  
  if (moveresponse_ == NULL) {
    auto* p = CreateMaybeMessage<::greyvarproto::MoveResponse>(GetArenaNoVirtual());
    moveresponse_ = p;
  }
  // @@protoc_insertion_point(field_mutable:greyvarproto.PlayerFrame.moveResponse)
  return moveresponse_;
}
inline void PlayerFrame::set_allocated_moveresponse(::greyvarproto::MoveResponse* moveresponse) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete moveresponse_;
  }
  if (moveresponse) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      moveresponse = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, moveresponse, submessage_arena);
    }
    
  } else {
    
  }
  moveresponse_ = moveresponse;
  // @@protoc_insertion_point(field_set_allocated:greyvarproto.PlayerFrame.moveResponse)
}

// .greyvarproto.PlayerQuit playerQuit = 3;
inline bool PlayerFrame::has_playerquit() const {
  return this != internal_default_instance() && playerquit_ != NULL;
}
inline void PlayerFrame::clear_playerquit() {
  if (GetArenaNoVirtual() == NULL && playerquit_ != NULL) {
    delete playerquit_;
  }
  playerquit_ = NULL;
}
inline const ::greyvarproto::PlayerQuit& PlayerFrame::_internal_playerquit() const {
  return *playerquit_;
}
inline const ::greyvarproto::PlayerQuit& PlayerFrame::playerquit() const {
  const ::greyvarproto::PlayerQuit* p = playerquit_;
  // @@protoc_insertion_point(field_get:greyvarproto.PlayerFrame.playerQuit)
  return p != NULL ? *p : *reinterpret_cast<const ::greyvarproto::PlayerQuit*>(
      &::greyvarproto::_PlayerQuit_default_instance_);
}
inline ::greyvarproto::PlayerQuit* PlayerFrame::release_playerquit() {
  // @@protoc_insertion_point(field_release:greyvarproto.PlayerFrame.playerQuit)
  
  ::greyvarproto::PlayerQuit* temp = playerquit_;
  playerquit_ = NULL;
  return temp;
}
inline ::greyvarproto::PlayerQuit* PlayerFrame::mutable_playerquit() {
  
  if (playerquit_ == NULL) {
    auto* p = CreateMaybeMessage<::greyvarproto::PlayerQuit>(GetArenaNoVirtual());
    playerquit_ = p;
  }
  // @@protoc_insertion_point(field_mutable:greyvarproto.PlayerFrame.playerQuit)
  return playerquit_;
}
inline void PlayerFrame::set_allocated_playerquit(::greyvarproto::PlayerQuit* playerquit) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete playerquit_;
  }
  if (playerquit) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      playerquit = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, playerquit, submessage_arena);
    }
    
  } else {
    
  }
  playerquit_ = playerquit;
  // @@protoc_insertion_point(field_set_allocated:greyvarproto.PlayerFrame.playerQuit)
}

// .greyvarproto.PlayerYou playerYou = 4;
inline bool PlayerFrame::has_playeryou() const {
  return this != internal_default_instance() && playeryou_ != NULL;
}
inline void PlayerFrame::clear_playeryou() {
  if (GetArenaNoVirtual() == NULL && playeryou_ != NULL) {
    delete playeryou_;
  }
  playeryou_ = NULL;
}
inline const ::greyvarproto::PlayerYou& PlayerFrame::_internal_playeryou() const {
  return *playeryou_;
}
inline const ::greyvarproto::PlayerYou& PlayerFrame::playeryou() const {
  const ::greyvarproto::PlayerYou* p = playeryou_;
  // @@protoc_insertion_point(field_get:greyvarproto.PlayerFrame.playerYou)
  return p != NULL ? *p : *reinterpret_cast<const ::greyvarproto::PlayerYou*>(
      &::greyvarproto::_PlayerYou_default_instance_);
}
inline ::greyvarproto::PlayerYou* PlayerFrame::release_playeryou() {
  // @@protoc_insertion_point(field_release:greyvarproto.PlayerFrame.playerYou)
  
  ::greyvarproto::PlayerYou* temp = playeryou_;
  playeryou_ = NULL;
  return temp;
}
inline ::greyvarproto::PlayerYou* PlayerFrame::mutable_playeryou() {
  
  if (playeryou_ == NULL) {
    auto* p = CreateMaybeMessage<::greyvarproto::PlayerYou>(GetArenaNoVirtual());
    playeryou_ = p;
  }
  // @@protoc_insertion_point(field_mutable:greyvarproto.PlayerFrame.playerYou)
  return playeryou_;
}
inline void PlayerFrame::set_allocated_playeryou(::greyvarproto::PlayerYou* playeryou) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete playeryou_;
  }
  if (playeryou) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      playeryou = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, playeryou, submessage_arena);
    }
    
  } else {
    
  }
  playeryou_ = playeryou;
  // @@protoc_insertion_point(field_set_allocated:greyvarproto.PlayerFrame.playerYou)
}

// -------------------------------------------------------------------

// MoveResponse

// -------------------------------------------------------------------

// EntityMoved

// int32 entityId = 1;
inline void EntityMoved::clear_entityid() {
  entityid_ = 0;
}
inline ::google::protobuf::int32 EntityMoved::entityid() const {
  // @@protoc_insertion_point(field_get:greyvarproto.EntityMoved.entityId)
  return entityid_;
}
inline void EntityMoved::set_entityid(::google::protobuf::int32 value) {
  
  entityid_ = value;
  // @@protoc_insertion_point(field_set:greyvarproto.EntityMoved.entityId)
}

// -------------------------------------------------------------------

// EntitySpawn

// int32 entityId = 1;
inline void EntitySpawn::clear_entityid() {
  entityid_ = 0;
}
inline ::google::protobuf::int32 EntitySpawn::entityid() const {
  // @@protoc_insertion_point(field_get:greyvarproto.EntitySpawn.entityId)
  return entityid_;
}
inline void EntitySpawn::set_entityid(::google::protobuf::int32 value) {
  
  entityid_ = value;
  // @@protoc_insertion_point(field_set:greyvarproto.EntitySpawn.entityId)
}

// int32 x = 2;
inline void EntitySpawn::clear_x() {
  x_ = 0;
}
inline ::google::protobuf::int32 EntitySpawn::x() const {
  // @@protoc_insertion_point(field_get:greyvarproto.EntitySpawn.x)
  return x_;
}
inline void EntitySpawn::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:greyvarproto.EntitySpawn.x)
}

// int32 y = 3;
inline void EntitySpawn::clear_y() {
  y_ = 0;
}
inline ::google::protobuf::int32 EntitySpawn::y() const {
  // @@protoc_insertion_point(field_get:greyvarproto.EntitySpawn.y)
  return y_;
}
inline void EntitySpawn::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:greyvarproto.EntitySpawn.y)
}

// int32 w = 4;
inline void EntitySpawn::clear_w() {
  w_ = 0;
}
inline ::google::protobuf::int32 EntitySpawn::w() const {
  // @@protoc_insertion_point(field_get:greyvarproto.EntitySpawn.w)
  return w_;
}
inline void EntitySpawn::set_w(::google::protobuf::int32 value) {
  
  w_ = value;
  // @@protoc_insertion_point(field_set:greyvarproto.EntitySpawn.w)
}

// int32 h = 5;
inline void EntitySpawn::clear_h() {
  h_ = 0;
}
inline ::google::protobuf::int32 EntitySpawn::h() const {
  // @@protoc_insertion_point(field_get:greyvarproto.EntitySpawn.h)
  return h_;
}
inline void EntitySpawn::set_h(::google::protobuf::int32 value) {
  
  h_ = value;
  // @@protoc_insertion_point(field_set:greyvarproto.EntitySpawn.h)
}

// string texture = 6;
inline void EntitySpawn::clear_texture() {
  texture_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EntitySpawn::texture() const {
  // @@protoc_insertion_point(field_get:greyvarproto.EntitySpawn.texture)
  return texture_.GetNoArena();
}
inline void EntitySpawn::set_texture(const ::std::string& value) {
  
  texture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:greyvarproto.EntitySpawn.texture)
}
#if LANG_CXX11
inline void EntitySpawn::set_texture(::std::string&& value) {
  
  texture_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:greyvarproto.EntitySpawn.texture)
}
#endif
inline void EntitySpawn::set_texture(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  texture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:greyvarproto.EntitySpawn.texture)
}
inline void EntitySpawn::set_texture(const char* value, size_t size) {
  
  texture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:greyvarproto.EntitySpawn.texture)
}
inline ::std::string* EntitySpawn::mutable_texture() {
  
  // @@protoc_insertion_point(field_mutable:greyvarproto.EntitySpawn.texture)
  return texture_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EntitySpawn::release_texture() {
  // @@protoc_insertion_point(field_release:greyvarproto.EntitySpawn.texture)
  
  return texture_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EntitySpawn::set_allocated_texture(::std::string* texture) {
  if (texture != NULL) {
    
  } else {
    
  }
  texture_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), texture);
  // @@protoc_insertion_point(field_set_allocated:greyvarproto.EntitySpawn.texture)
}

// -------------------------------------------------------------------

// PlayerQuit

// int32 playerId = 1;
inline void PlayerQuit::clear_playerid() {
  playerid_ = 0;
}
inline ::google::protobuf::int32 PlayerQuit::playerid() const {
  // @@protoc_insertion_point(field_get:greyvarproto.PlayerQuit.playerId)
  return playerid_;
}
inline void PlayerQuit::set_playerid(::google::protobuf::int32 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:greyvarproto.PlayerQuit.playerId)
}

// -------------------------------------------------------------------

// PlayerAlreadyHere

// int32 playerId = 1;
inline void PlayerAlreadyHere::clear_playerid() {
  playerid_ = 0;
}
inline ::google::protobuf::int32 PlayerAlreadyHere::playerid() const {
  // @@protoc_insertion_point(field_get:greyvarproto.PlayerAlreadyHere.playerId)
  return playerid_;
}
inline void PlayerAlreadyHere::set_playerid(::google::protobuf::int32 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:greyvarproto.PlayerAlreadyHere.playerId)
}

// -------------------------------------------------------------------

// PlayerJoined

// string username = 1;
inline void PlayerJoined::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerJoined::username() const {
  // @@protoc_insertion_point(field_get:greyvarproto.PlayerJoined.username)
  return username_.GetNoArena();
}
inline void PlayerJoined::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:greyvarproto.PlayerJoined.username)
}
#if LANG_CXX11
inline void PlayerJoined::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:greyvarproto.PlayerJoined.username)
}
#endif
inline void PlayerJoined::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:greyvarproto.PlayerJoined.username)
}
inline void PlayerJoined::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:greyvarproto.PlayerJoined.username)
}
inline ::std::string* PlayerJoined::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:greyvarproto.PlayerJoined.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerJoined::release_username() {
  // @@protoc_insertion_point(field_release:greyvarproto.PlayerJoined.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerJoined::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:greyvarproto.PlayerJoined.username)
}

// -------------------------------------------------------------------

// PlayerYou

// int32 playerId = 1;
inline void PlayerYou::clear_playerid() {
  playerid_ = 0;
}
inline ::google::protobuf::int32 PlayerYou::playerid() const {
  // @@protoc_insertion_point(field_get:greyvarproto.PlayerYou.playerId)
  return playerid_;
}
inline void PlayerYou::set_playerid(::google::protobuf::int32 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:greyvarproto.PlayerYou.playerId)
}

// -------------------------------------------------------------------

// Tile

// uint32 col = 1;
inline void Tile::clear_col() {
  col_ = 0u;
}
inline ::google::protobuf::uint32 Tile::col() const {
  // @@protoc_insertion_point(field_get:greyvarproto.Tile.col)
  return col_;
}
inline void Tile::set_col(::google::protobuf::uint32 value) {
  
  col_ = value;
  // @@protoc_insertion_point(field_set:greyvarproto.Tile.col)
}

// uint32 row = 2;
inline void Tile::clear_row() {
  row_ = 0u;
}
inline ::google::protobuf::uint32 Tile::row() const {
  // @@protoc_insertion_point(field_get:greyvarproto.Tile.row)
  return row_;
}
inline void Tile::set_row(::google::protobuf::uint32 value) {
  
  row_ = value;
  // @@protoc_insertion_point(field_set:greyvarproto.Tile.row)
}

// string tex = 3;
inline void Tile::clear_tex() {
  tex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Tile::tex() const {
  // @@protoc_insertion_point(field_get:greyvarproto.Tile.tex)
  return tex_.GetNoArena();
}
inline void Tile::set_tex(const ::std::string& value) {
  
  tex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:greyvarproto.Tile.tex)
}
#if LANG_CXX11
inline void Tile::set_tex(::std::string&& value) {
  
  tex_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:greyvarproto.Tile.tex)
}
#endif
inline void Tile::set_tex(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:greyvarproto.Tile.tex)
}
inline void Tile::set_tex(const char* value, size_t size) {
  
  tex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:greyvarproto.Tile.tex)
}
inline ::std::string* Tile::mutable_tex() {
  
  // @@protoc_insertion_point(field_mutable:greyvarproto.Tile.tex)
  return tex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Tile::release_tex() {
  // @@protoc_insertion_point(field_release:greyvarproto.Tile.tex)
  
  return tex_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Tile::set_allocated_tex(::std::string* tex) {
  if (tex != NULL) {
    
  } else {
    
  }
  tex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tex);
  // @@protoc_insertion_point(field_set_allocated:greyvarproto.Tile.tex)
}

// bool flipH = 4;
inline void Tile::clear_fliph() {
  fliph_ = false;
}
inline bool Tile::fliph() const {
  // @@protoc_insertion_point(field_get:greyvarproto.Tile.flipH)
  return fliph_;
}
inline void Tile::set_fliph(bool value) {
  
  fliph_ = value;
  // @@protoc_insertion_point(field_set:greyvarproto.Tile.flipH)
}

// bool flipV = 5;
inline void Tile::clear_flipv() {
  flipv_ = false;
}
inline bool Tile::flipv() const {
  // @@protoc_insertion_point(field_get:greyvarproto.Tile.flipV)
  return flipv_;
}
inline void Tile::set_flipv(bool value) {
  
  flipv_ = value;
  // @@protoc_insertion_point(field_set:greyvarproto.Tile.flipV)
}

// int32 rot = 6;
inline void Tile::clear_rot() {
  rot_ = 0;
}
inline ::google::protobuf::int32 Tile::rot() const {
  // @@protoc_insertion_point(field_get:greyvarproto.Tile.rot)
  return rot_;
}
inline void Tile::set_rot(::google::protobuf::int32 value) {
  
  rot_ = value;
  // @@protoc_insertion_point(field_set:greyvarproto.Tile.rot)
}

// -------------------------------------------------------------------

// Grid

// string title = 1;
inline void Grid::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Grid::title() const {
  // @@protoc_insertion_point(field_get:greyvarproto.Grid.title)
  return title_.GetNoArena();
}
inline void Grid::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:greyvarproto.Grid.title)
}
#if LANG_CXX11
inline void Grid::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:greyvarproto.Grid.title)
}
#endif
inline void Grid::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:greyvarproto.Grid.title)
}
inline void Grid::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:greyvarproto.Grid.title)
}
inline ::std::string* Grid::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:greyvarproto.Grid.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Grid::release_title() {
  // @@protoc_insertion_point(field_release:greyvarproto.Grid.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Grid::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:greyvarproto.Grid.title)
}

// repeated .greyvarproto.Tile tiles = 2;
inline int Grid::tiles_size() const {
  return tiles_.size();
}
inline void Grid::clear_tiles() {
  tiles_.Clear();
}
inline ::greyvarproto::Tile* Grid::mutable_tiles(int index) {
  // @@protoc_insertion_point(field_mutable:greyvarproto.Grid.tiles)
  return tiles_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::greyvarproto::Tile >*
Grid::mutable_tiles() {
  // @@protoc_insertion_point(field_mutable_list:greyvarproto.Grid.tiles)
  return &tiles_;
}
inline const ::greyvarproto::Tile& Grid::tiles(int index) const {
  // @@protoc_insertion_point(field_get:greyvarproto.Grid.tiles)
  return tiles_.Get(index);
}
inline ::greyvarproto::Tile* Grid::add_tiles() {
  // @@protoc_insertion_point(field_add:greyvarproto.Grid.tiles)
  return tiles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::greyvarproto::Tile >&
Grid::tiles() const {
  // @@protoc_insertion_point(field_list:greyvarproto.Grid.tiles)
  return tiles_;
}

// -------------------------------------------------------------------

// ConnectionResponse

// string serverVersion = 1;
inline void ConnectionResponse::clear_serverversion() {
  serverversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConnectionResponse::serverversion() const {
  // @@protoc_insertion_point(field_get:greyvarproto.ConnectionResponse.serverVersion)
  return serverversion_.GetNoArena();
}
inline void ConnectionResponse::set_serverversion(const ::std::string& value) {
  
  serverversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:greyvarproto.ConnectionResponse.serverVersion)
}
#if LANG_CXX11
inline void ConnectionResponse::set_serverversion(::std::string&& value) {
  
  serverversion_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:greyvarproto.ConnectionResponse.serverVersion)
}
#endif
inline void ConnectionResponse::set_serverversion(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  serverversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:greyvarproto.ConnectionResponse.serverVersion)
}
inline void ConnectionResponse::set_serverversion(const char* value, size_t size) {
  
  serverversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:greyvarproto.ConnectionResponse.serverVersion)
}
inline ::std::string* ConnectionResponse::mutable_serverversion() {
  
  // @@protoc_insertion_point(field_mutable:greyvarproto.ConnectionResponse.serverVersion)
  return serverversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConnectionResponse::release_serverversion() {
  // @@protoc_insertion_point(field_release:greyvarproto.ConnectionResponse.serverVersion)
  
  return serverversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectionResponse::set_allocated_serverversion(::std::string* serverversion) {
  if (serverversion != NULL) {
    
  } else {
    
  }
  serverversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serverversion);
  // @@protoc_insertion_point(field_set_allocated:greyvarproto.ConnectionResponse.serverVersion)
}

// repeated .greyvarproto.PlayerAlreadyHere playerAlreadyHere = 5;
inline int ConnectionResponse::playeralreadyhere_size() const {
  return playeralreadyhere_.size();
}
inline void ConnectionResponse::clear_playeralreadyhere() {
  playeralreadyhere_.Clear();
}
inline ::greyvarproto::PlayerAlreadyHere* ConnectionResponse::mutable_playeralreadyhere(int index) {
  // @@protoc_insertion_point(field_mutable:greyvarproto.ConnectionResponse.playerAlreadyHere)
  return playeralreadyhere_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::greyvarproto::PlayerAlreadyHere >*
ConnectionResponse::mutable_playeralreadyhere() {
  // @@protoc_insertion_point(field_mutable_list:greyvarproto.ConnectionResponse.playerAlreadyHere)
  return &playeralreadyhere_;
}
inline const ::greyvarproto::PlayerAlreadyHere& ConnectionResponse::playeralreadyhere(int index) const {
  // @@protoc_insertion_point(field_get:greyvarproto.ConnectionResponse.playerAlreadyHere)
  return playeralreadyhere_.Get(index);
}
inline ::greyvarproto::PlayerAlreadyHere* ConnectionResponse::add_playeralreadyhere() {
  // @@protoc_insertion_point(field_add:greyvarproto.ConnectionResponse.playerAlreadyHere)
  return playeralreadyhere_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::greyvarproto::PlayerAlreadyHere >&
ConnectionResponse::playeralreadyhere() const {
  // @@protoc_insertion_point(field_list:greyvarproto.ConnectionResponse.playerAlreadyHere)
  return playeralreadyhere_;
}

// -------------------------------------------------------------------

// NoResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace greyvarproto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_server_5fto_5fclient_5fmessages_2eproto
