// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: server_interface.proto

#include "server_interface.pb.h"
#include "server_interface.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace greyvarproto {

static const char* ServerInterface_method_names[] = {
  "/greyvarproto.ServerInterface/Connect",
  "/greyvarproto.ServerInterface/PlayerSetup",
  "/greyvarproto.ServerInterface/GetServerFrame",
};

std::unique_ptr< ServerInterface::Stub> ServerInterface::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ServerInterface::Stub> stub(new ServerInterface::Stub(channel));
  return stub;
}

ServerInterface::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Connect_(ServerInterface_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PlayerSetup_(ServerInterface_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetServerFrame_(ServerInterface_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ServerInterface::Stub::Connect(::grpc::ClientContext* context, const ::greyvarproto::ConnectionRequest& request, ::greyvarproto::ConnectionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Connect_, context, request, response);
}

void ServerInterface::Stub::experimental_async::Connect(::grpc::ClientContext* context, const ::greyvarproto::ConnectionRequest* request, ::greyvarproto::ConnectionResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Connect_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::greyvarproto::ConnectionResponse>* ServerInterface::Stub::AsyncConnectRaw(::grpc::ClientContext* context, const ::greyvarproto::ConnectionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::greyvarproto::ConnectionResponse>::Create(channel_.get(), cq, rpcmethod_Connect_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::greyvarproto::ConnectionResponse>* ServerInterface::Stub::PrepareAsyncConnectRaw(::grpc::ClientContext* context, const ::greyvarproto::ConnectionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::greyvarproto::ConnectionResponse>::Create(channel_.get(), cq, rpcmethod_Connect_, context, request, false);
}

::grpc::Status ServerInterface::Stub::PlayerSetup(::grpc::ClientContext* context, const ::greyvarproto::NewPlayer& request, ::greyvarproto::NoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PlayerSetup_, context, request, response);
}

void ServerInterface::Stub::experimental_async::PlayerSetup(::grpc::ClientContext* context, const ::greyvarproto::NewPlayer* request, ::greyvarproto::NoResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PlayerSetup_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::greyvarproto::NoResponse>* ServerInterface::Stub::AsyncPlayerSetupRaw(::grpc::ClientContext* context, const ::greyvarproto::NewPlayer& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::greyvarproto::NoResponse>::Create(channel_.get(), cq, rpcmethod_PlayerSetup_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::greyvarproto::NoResponse>* ServerInterface::Stub::PrepareAsyncPlayerSetupRaw(::grpc::ClientContext* context, const ::greyvarproto::NewPlayer& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::greyvarproto::NoResponse>::Create(channel_.get(), cq, rpcmethod_PlayerSetup_, context, request, false);
}

::grpc::Status ServerInterface::Stub::GetServerFrame(::grpc::ClientContext* context, const ::greyvarproto::ClientRequests& request, ::greyvarproto::ServerFrameResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetServerFrame_, context, request, response);
}

void ServerInterface::Stub::experimental_async::GetServerFrame(::grpc::ClientContext* context, const ::greyvarproto::ClientRequests* request, ::greyvarproto::ServerFrameResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetServerFrame_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::greyvarproto::ServerFrameResponse>* ServerInterface::Stub::AsyncGetServerFrameRaw(::grpc::ClientContext* context, const ::greyvarproto::ClientRequests& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::greyvarproto::ServerFrameResponse>::Create(channel_.get(), cq, rpcmethod_GetServerFrame_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::greyvarproto::ServerFrameResponse>* ServerInterface::Stub::PrepareAsyncGetServerFrameRaw(::grpc::ClientContext* context, const ::greyvarproto::ClientRequests& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::greyvarproto::ServerFrameResponse>::Create(channel_.get(), cq, rpcmethod_GetServerFrame_, context, request, false);
}

ServerInterface::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ServerInterface_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ServerInterface::Service, ::greyvarproto::ConnectionRequest, ::greyvarproto::ConnectionResponse>(
          std::mem_fn(&ServerInterface::Service::Connect), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ServerInterface_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ServerInterface::Service, ::greyvarproto::NewPlayer, ::greyvarproto::NoResponse>(
          std::mem_fn(&ServerInterface::Service::PlayerSetup), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ServerInterface_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ServerInterface::Service, ::greyvarproto::ClientRequests, ::greyvarproto::ServerFrameResponse>(
          std::mem_fn(&ServerInterface::Service::GetServerFrame), this)));
}

ServerInterface::Service::~Service() {
}

::grpc::Status ServerInterface::Service::Connect(::grpc::ServerContext* context, const ::greyvarproto::ConnectionRequest* request, ::greyvarproto::ConnectionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ServerInterface::Service::PlayerSetup(::grpc::ServerContext* context, const ::greyvarproto::NewPlayer* request, ::greyvarproto::NoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ServerInterface::Service::GetServerFrame(::grpc::ServerContext* context, const ::greyvarproto::ClientRequests* request, ::greyvarproto::ServerFrameResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace greyvarproto

